{
    "en_vn": {
        "data": {
            "content": null,
            "word": "iterator"
        }
    },
    "en_en": {
        "data": {
            "content": null,
            "word": "iterator"
        }
    },
    "synonyms": {
        "data": {
            "content": null,
            "word": "iterator"
        }
    },
    "grammar": {
        "data": {
            "content": null,
            "word": "iterator"
        }
    },
    "specialist": {
        "data": {
            "content": "<div class=\"dict--title\">T\u1eeb \u0111i\u1ec3n K\u1ef9 thu\u1eadt (EN)</div><div class=\"dict--content\"><table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody><tr><td/><td><b><font color=\"#1a76bf\">L\u0129nh v\u1ef1c:</font></b><font color=\"#666699\"> to\u00e1n &amp; tin</font></td></tr></tbody></table><table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody><tr><td/><td><font color=\"#999\">\u25a0</font><font>\u00a0bi\u1ebfn l\u1eb7p</font></td></tr></tbody></table></div>",
            "word": "iterator"
        }
    },
    "sentences": [
        {
            "en": "The declaration of a simple array <em>iterator</em> class.",
            "vi": "M\u00f4 t\u1ea3 c\u1ee7a l\u1edbp b\u1ed9 l\u1eb7p \u0111\u01a1n gi\u1ea3n cho m\u1ea3ng."
        },
        {
            "en": "Request the next thing object from the list <em>iterator</em>.",
            "vi": "\u0110\u00f2i \u0111\u1ed1i t\u01b0\u1ee3ng thing k\u1ebf ti\u1ebfp t\u1eeb b\u1ed9 l\u1eb7p danh s\u00e1ch."
        },
        {
            "en": "The vector <em>iterator</em> class is identical to the array <em>iterator</em> class and therefore will be not repeated here.",
            "vi": "\u1ede \u0111\u00e2y do l\u1edbp b\u1ed9 l\u1eb7p v\u00e9c - t\u01a1 \u0111\u1ed3ng nh\u1ea5t v\u1edbi l\u1edbp b\u1ed9 l\u1eb7p m\u1ea3ng n\u00ean n\u00f3 s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c tr\u00ecnh b\u00e0y l\u1ea1i."
        },
        {
            "en": "Declaration of an <em>iterator</em> class for an array of objects.",
            "vi": "M\u00f4 t\u1ea3 l\u1edbp b\u1ed9 l\u1eb7p m\u1ea3ng c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng."
        },
        {
            "en": "Implementation of an <em>iterator</em> class for an array of objects.",
            "vi": "Th\u1ef1c thi l\u1edbp b\u1ed9 l\u1eb7p m\u1ea3ng c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng."
        },
        {
            "en": "Therefore, there may be many <em>iterator</em> objects, each working on a different place in the array.",
            "vi": "Nh\u1edd \u0111\u00f3, c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ed9 l\u1eb7p, m\u1ed7i m\u1ed9t trong ch\u00fang v\u1eadn h\u00e0nh tr\u00ean m\u1ed9t v\u1ecb tr\u00ed ri\u00eang trong m\u1ea3ng t\u01b0\u01a1ng \u1ee9ng."
        },
        {
            "en": "Notice also that the <em>iterator</em> will work with any object of the array manger class.",
            "vi": "C\u0169ng c\u1ea7n l\u01b0u \u00fd r\u1eb1ng b\u1ed9 l\u1eb7p \u1ea5y s\u1ebd v\u1eadn h\u00e0nh v\u1edbi b\u1ea5t k\u1ef3 \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0o c\u1ee7a l\u1edbp b\u1ed9 qu\u1ea3n l\u00fd m\u1ea3ng."
        },
        {
            "en": "For the binary search tree, use an in order traversal <em>iterator</em>.",
            "vi": "C\u00f2n v\u1edbi c\u00e2y nh\u1ecb ph\u00e2n t\u00ecm ki\u1ebfm, th\u00ec ph\u1ea3i d\u00f9ng m\u1ed9t b\u1ed9 l\u1eb7p du\u1ef5\u00eat c\u00e2y theo th\u1ee9 t\u1ef1 gi\u1eefa."
        },
        {
            "en": "The application class's list function therefore first creates an <em>iterator</em> object.",
            "vi": "V\u00ec v\u1eady, tr\u01b0\u1edbc h\u1ebft h\u00e0m list c\u1ee7a l\u1edbp tr\u1ec9nh \u1ee9ng d\u1ee5ng s\u1ebd t\u1ea1o ra m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ed9 l\u1eb7p."
        },
        {
            "en": "Finally, you were introduced to a technique for writing generic container and <em>iterator</em> classes.",
            "vi": "Sau c\u00f9ng, b\u1ea1n \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u v\u1ec1 k\u1ef9 thu\u1eadt vi\u1ebft c\u00e1c l\u1edbp b\u1ed9 l\u1eb7p hay m\u1ed9t l\u1edbp c\u00f4ngten\u01a1 kh\u00e1i qu\u00e1t."
        },
        {
            "en": "This function also returns the index of the array manager being <em>iterator</em> using a reference parameter.",
            "vi": "H\u00e0m n\u00e0y c\u0169ng tr\u1ea3 v\u1ec1 ch\u1ec9 s\u1ed1 c\u1ee7a b\u1ed9 qu\u1ea3n m\u1ea3ng \u0111ang \u0111\u01b0\u1ee3c l\u1eb7p nh\u1edd d\u00f9ng m\u1ed9t tham bi\u1ebfn."
        },
        {
            "en": "The declaration of an <em>iterator</em> class for a vector that manages a simple data type.",
            "vi": "M\u00f4 t\u1ea3 b\u1ed9 l\u1eb7p cho m\u1ed9t v\u00e9c - t\u01a1 qu\u1ea3n l\u00fd ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01a1n gi\u1ea3n."
        },
        {
            "en": "The array <em>iterator</em> (listing 1-16 and listing 1-17) has also been modified slightly.",
            "vi": "L\u1edbp b\u1ed9 l\u1eb7p cho m\u1ea3ng (th\u1ec3 hi\u1ec7n trong listing 1 - 16 v\u00e0 listing 1 - 17) c\u0169ng \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ebf bi\u1ebfn \u0111\u00f4i ch\u00fat."
        },
        {
            "en": "The implementation of an <em>iterator</em> class for a vector that manages a simple data type.",
            "vi": "Th\u1ef1c thi b\u1ed9 l\u1eb7p cho m\u1ed9t v\u00e9c - t\u01a1 qu\u1ea3n l\u00fd ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01a1n gi\u1ea3n."
        },
        {
            "en": "Create a new list <em>iterator</em> object, initializing it with the list pointer returned.",
            "vi": "T\u1ea1o m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ed9 l\u1eb7p danh s\u00e1ch m\u1edbi, khi kh\u1edfi sinh n\u00f3 b\u1eb1ng con tr\u1ecf danh s\u00e1ch \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1."
        },
        {
            "en": "As you can see in listing 1-6, the <em>iterator</em> keeps track of where it is in the array (current_index).",
            "vi": "Nh\u01b0 b\u1ea1n th\u1ea5y trong listing 1 - 6, b\u1ed9 l\u1eb7p cho m\u1ea3ng lu\u00f4n theo d\u00f5i n\u00f3 \u0111ang \u1edf \u0111\u00e2u trong m\u1ea3ng (b\u1eb1ng current index)."
        },
        {
            "en": "The <em>iterator</em> object keeps track of its position in the data structures independent of the data structures itself.",
            "vi": "M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ed9 l\u1eb7p s\u1ebd cung c\u1ea5p cho \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0o d\u00f9ng b\u1ed9 l\u1eb7p \u1ea5y m\u1ed7i l\u1ea7n m\u1ed9t ph\u1ea7n t\u1eed c\u1ee7a m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u theo m\u1ed9t th\u1ee9 t\u1ef1 ti\u1ec1n \u0111\u1ecbnh n\u00e0o \u0111\u00f3."
        },
        {
            "en": "Once the <em>iterator</em> classes are written, you never have to worry about the logic of traversing the data structures again.",
            "vi": "M\u1ed9t khi l\u1edbp b\u1ed9 l\u1eb7p \u0111\u00e3 \u0111\u01b0\u1ee3c ghi nh\u1eadn, b\u1ea1n kh\u00f4ng ph\u1ea3i lo g\u00ec vi\u1ec7c duy\u1ec7t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u1ea5y n\u1eefa."
        },
        {
            "en": "You simply create an <em>iterator</em> object that returns values in the desired order and ask it to give you one element after another from the data structure.",
            "vi": "B\u1ea1n ch\u1ec9 vi\u1ec7c t\u1ea1o m\u1ed9t \u0111\u1ed1i tu\u1ee3ng b\u1ed9 l\u1eb7p tr\u1ea3 v\u1ec1 c\u00e1c tr\u1ecb theo \u0111\u00fang th\u1ee9 t\u1ef1 mong mu\u1ed1n, r\u1ed1i \u0111\u00f2i n\u00f3 c\u1ea5p cho b\u1ea1n m\u1ed9t ph\u1ea7n t\u1eed \u0111\u1ee9ng sau m\u1ed9t ph\u1ea7n t\u1eed kh\u00e1c."
        },
        {
            "en": "The application class's list function uses an <em>iterator</em> object to step through the elements in the array one at the time.",
            "vi": "H\u00e0m list c\u1ee7a l\u1edbp tr\u00ecnh \u1ee9ng d\u1ee5ng c\u00f3 d\u00f9ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng b\u1ed9 l\u1eb7p \u0111\u1ec1 l\u1ea7n kh\u1eafp c\u00e1c ph\u1ea7n t\u1eed trong m\u1ea3ng m\u1ed7i b\u01b0\u1edbc m\u1ed9t ph\u1ea7n t\u1eed."
        }
    ],
    "suggestions": []
}